https://www.acmicpc.net/problem/2096

import java.util.*;
import java.io.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    static StringTokenizer st;
    static long max = Long.MIN_VALUE;
    static long min = Long.MAX_VALUE;
    static int n, m;
    static StringBuilder sb;
    static int idx = 0;
    static final int MOD = 1000000;

    public static void main(String[] args) throws IOException {
        n = Integer.parseInt(br.readLine());
        int[][] arr = new int[n+1][3];

        for (int i = 1; i <= n; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < 3; j++) {
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        int[][] dp = new int[n+1][3];

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < 3; j++) {
                if (j == 0) {
                    dp[i][j] = Math.max(dp[i][j], arr[i][j] + dp[i-1][j]);
                    dp[i][j] = Math.max(dp[i][j], arr[i][j] + dp[i-1][j+1]);
                }
                else if (j == 1) {
                    dp[i][j] = Math.max(dp[i][j], arr[i][j] + dp[i-1][j-1]);
                    dp[i][j] = Math.max(dp[i][j], arr[i][j] + dp[i-1][j]);
                    dp[i][j] = Math.max(dp[i][j], arr[i][j] + dp[i-1][j+1]);
                }
                else if (j == 2) {
                    dp[i][j] = Math.max(dp[i][j], arr[i][j] + dp[i-1][j]);
                    dp[i][j] = Math.max(dp[i][j], arr[i][j] + dp[i-1][j-1]);
                }
            }
        }

        int[][] dp2 = new int[n+1][3];
        for (int i = 1; i <= n; i++) {
            Arrays.fill(dp2[i], Integer.MAX_VALUE);
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < 3; j++) {
                if (j == 0) {
                    dp2[i][j] = Math.min(dp2[i][j], arr[i][j] + dp2[i-1][j]);
                    dp2[i][j] = Math.min(dp2[i][j], arr[i][j] + dp2[i-1][j+1]);
                }
                else if (j == 1) {
                    dp2[i][j] = Math.min(dp2[i][j], arr[i][j] + dp2[i-1][j-1]);
                    dp2[i][j] = Math.min(dp2[i][j], arr[i][j] + dp2[i-1][j]);
                    dp2[i][j] = Math.min(dp2[i][j], arr[i][j] + dp2[i-1][j+1]);
                }
                else if (j == 2) {
                    dp2[i][j] = Math.min(dp2[i][j], arr[i][j] + dp2[i-1][j]);
                    dp2[i][j] = Math.min(dp2[i][j], arr[i][j] + dp2[i-1][j-1]);
                }
            }
        }

        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;

        for (int i = 0; i < 3; i++) {
            max = Math.max(max, dp[n][i]);
            min = Math.min(min, dp2[n][i]);
        }

        System.out.println(max + " " + min);
    }
}