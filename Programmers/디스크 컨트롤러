https://school.programmers.co.kr/learn/courses/30/lessons/42627#

import java.util.*;

class Solution {
    public int solution(int[][] jobs) {
        Arrays.sort(jobs, (a, b) -> {
            if (a[0] != b[0]) return a[0] - b[0];
            else return a[1] - b[1];
        });
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
           if (a[3] != b[3]) {
               return a[3] - b[3];
           } else if (a[2] != b[2]) {
               return a[2] - b[2];
           } else if (a[1] != b[1]) {
               return a[1] - b[1];
           } else {
               return a[0] - b[0];
           }
        });

        int ans = 0;
        int idx = 0;
        int cnt = 0;
        for (; cnt <= jobs.length * 1000 || (idx < jobs.length && !pq.isEmpty()); cnt++) {
            if (idx < jobs.length && cnt >= jobs[idx][0]) {
                pq.offer(new int[] {idx, jobs[idx][0], jobs[idx][1] + 1, 1});
                idx++;
            }

            try {
                int[] arr = pq.poll();

                arr[2]--;

                if (arr[2] > 0) {
                    arr[3] = 0;
                    pq.offer(arr);
                } else {
                    ans += cnt - arr[1];
                    try{
                        if (pq.peek()[1] <= cnt) {
                            cnt--;
                        }
                    } catch(Exception e) {
                    }
                }
            } catch(Exception e){}

        }

        return ans / jobs.length;
    }
}