https://school.programmers.co.kr/learn/courses/30/lessons/43236

import java.util.*;

class Solution {
    public int solution(int distance, int[] rocks, int n) {
        int answer = 0;
        Arrays.sort(rocks);
        int[] subdistance = new int[rocks.length + 1];
        subdistance[0] = rocks[0];
        subdistance[rocks.length] = distance - rocks[rocks.length - 1];

        for (int i = 1; i < rocks.length; i++) {
            subdistance[i] = rocks[i] - rocks[i-1];
        }

        int left = 0;
        int right = distance;

        while(left <= right) {
            int mid = (left + right) / 2;
            int cnt = 0;
            int dissum = 0;
            for (int i = 0; i < subdistance.length; i++) {
                dissum += subdistance[i];
                if (dissum < mid) {
                    cnt++;
                    continue;
                }
                dissum = 0;
            }
            if (cnt > n) {
                right = mid - 1;
            } else {
                left = mid + 1;
                answer = mid;
            }
        }
        return answer;
    }
}