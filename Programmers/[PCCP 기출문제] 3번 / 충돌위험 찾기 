https://school.programmers.co.kr/learn/courses/30/lessons/340211

import java.util.*;

class Solution {
    public int solution(int[][] points, int[][] routes) {
        int answer = 0;

        int n = points.length;
        int cnt = routes.length;

        // [idx, x, y, start, end, p]
        HashMap<String, Integer> hashmap = new HashMap<>();
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < cnt; i++) {
            int start = routes[i][0];
            int end = routes[i][1];
            int[] arr = {i, points[start-1][0], points[start-1][1], start, end, 0};
            String str = points[start-1][0] + " " + points[start-1][1];
            hashmap.put(str, hashmap.getOrDefault(str, 0) + 1);
            q.add(arr);
        }
        for (String key : hashmap.keySet()) {
            int val = hashmap.get(key);
            if (val > 1) {
                answer++;
            }
        }

        while(!q.isEmpty()) {
            cnt = q.size();
            HashMap<String, Integer> map = new HashMap<>();
            for (int i = 0; i < cnt; i++) {
                    int[] arr = q.poll();
                    int x = arr[1];
                    int y = arr[2];
                    int start = arr[3];
                    int end = arr[4];
                    if (x != points[end-1][0]) {
                        if (x < points[end-1][0]) arr[1]++;
                        else if (x > points[end-1][0]) arr[1]--;
                    } else if (y != points[end-1][1]) {
                        if (y < points[end-1][1]) arr[2]++;
                        else if (y > points[end-1][1]) arr[2]--;
                    }

                    if (arr[1] == points[end-1][0] && arr[2] == points[end-1][1]){
                        arr[5]++;
                        if (arr[5] + 1 == routes[0].length) {
                            String str = arr[1] + " " + arr[2];
                            map.put(str, map.getOrDefault(str, 0) + 1);
                            continue;
                        }

                        arr[3] = routes[arr[0]][arr[5]];
                        arr[4] = routes[arr[0]][arr[5]+1];
                    }

                    String str = arr[1] + " " + arr[2];
                    map.put(str, map.getOrDefault(str, 0) + 1);

                    q.add(arr);
            }
            for (String key : map.keySet()) {
                int val = map.get(key);
                if (val > 1) {
                    answer++;
                }
            }
        }

        return answer;
    }
}