https://school.programmers.co.kr/learn/courses/30/lessons/67259

import java.util.*;

class Solution {
        public int solution(int[][] board) {
        int N = board.length;
        int[] dx = { -1, 1, 0, 0 };
        int[] dy = { 0, 0, -1, 1 };

        int[][][] costs = new int[N][N][4];
        for (int[][] c1 : costs) {
            for (int[] c2 : c1) {
                Arrays.fill(c2, Integer.MAX_VALUE);
            }
        }

        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->a[3]-b[3]);
        pq.offer(new int[]{0, 0, -1, 0});

        int answer = Integer.MAX_VALUE;
        while(!pq.isEmpty()) {
            int[] now = pq.poll();
            int x = now[0];
            int y = now[1];
            int dir = now[2];
            int cost = now[3];

            if(x == N-1 && y == N-1) {
                answer = Math.min(answer, cost);
                break;
            }

            if(cost > answer) continue;

            for(int newDir=0; newDir<4; newDir++){
                int nx = x + dx[newDir];
                int ny = y + dy[newDir];
                if(nx<0 || ny<0 || nx>=N || ny>=N) continue;
                if(board[nx][ny] == 1) continue;

                int newCost = cost + (dir == -1 || dir == newDir ? 100 : 600);

                if(newCost < costs[nx][ny][newDir]){
                    costs[nx][ny][newDir] = newCost;
                    pq.offer(new int[]{nx, ny, newDir, newCost});
                }
            }
        }
        return answer;
    }
}