https://school.programmers.co.kr/learn/courses/30/lessons/340212

import java.util.*;

class Solution {
    public int solution(int[] diffs, int[] times, long limit) {
        int[] sorted_diffs = diffs.clone();
        Arrays.sort(sorted_diffs);
        int left = 1;
        int right = sorted_diffs[sorted_diffs.length - 1];

        int ans = Integer.MAX_VALUE;
        while(left <= right) {
            int mid = (left + right) / 2;
            long time = getTime(mid, diffs, times);
            if (time <= limit) {
                ans = Math.min(ans, mid);
            }

            if (time > limit) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return ans;
    }

    long getTime(int level, int[] diffs, int[] times) {
        long time = 0;
        for (int i = 0; i < diffs.length; i++) {
            int diff = diffs[i];
            if (diff <= level) {
                time += times[i];
            } else {
                int gap = diff - level;
                time += gap * (times[i] + times[i - 1]) + times[i];
            }
        }
        return time;
    }
}