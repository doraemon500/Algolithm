https://school.programmers.co.kr/learn/courses/30/lessons/12904#

import java.util.*;

class Solution
{
    public int solution(String s)
    {
        int answer = 1;

        for (int i = 0; i < s.length(); i++) {
            if (i + 1 == s.length()) continue;
            if (s.charAt(i) == s.charAt(i+1)) {
                for (int k = 0; k <= i; k++) {
                    try {
                        if (s.charAt(i - k) == s.charAt(i + 1 + k)) {
                            answer = Math.max(answer, k*2+2);
                        } else break;
                    } catch(Exception e) {
                        break;
                    }
                }
            }
            for (int k = 0; k <= i; k++) {
                try {
                    if (s.charAt(i-k) == s.charAt(i+k))
                        answer = Math.max(answer, k*2+1);
                    else
                        break;
                } catch(Exception e){
                    break;
                }
            }
        }

        return answer;
    }
}


### dp 버전

import java.util.*;

class Solution
{
    public int solution(String s)
    {
        int n = s.length();
        if (n <= 1) {
            return n;
        }

        boolean[][] dp = new boolean[n][n];
        int maxLen = 1;

        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }

        for (int i = 0; i < n - 1; i++) {
            if (s.charAt(i) == s.charAt(i + 1)) {
                dp[i][i + 1] = true;
                maxLen = 2;
            }
        }

        for (int len = 3; len <= n; len++) {
            for (int start = 0; start <= n - len; start++) {
                int end = start + len - 1;
                if (s.charAt(start) == s.charAt(end) && dp[start + 1][end - 1]) {
                    dp[start][end] = true;
                    maxLen = len;
                }
            }
        }

        return maxLen;
    }
}
